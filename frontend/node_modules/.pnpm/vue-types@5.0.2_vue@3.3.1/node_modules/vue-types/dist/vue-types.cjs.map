{"version":3,"file":"vue-types.cjs","sources":["../src/config.ts","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts","../src/index.cjs.ts"],"sourcesContent":["import { VueTypesConfig } from './types'\n\nexport const config: VueTypesConfig = {\n  silent: false,\n  logLevel: 'warn',\n}\n","import { isPlainObject as _isPlainObject } from 'is-plain-object'\nimport { config } from './config'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n  VueTypesConfig,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string, level?: VueTypesConfig['logLevel']) => string | void =\n  identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg: string, level = config.logLevel) {\n        if (config.silent === false) {\n          console[level](`[VueTypes warn]: ${msg}`)\n        }\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = <T extends Function>(value: unknown): value is T =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n * @param name - Optional validator name\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n  name?: string,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) &&\n  has(value, '_vueTypes_name') &&\n  (!name || value._vueTypes_name === name)\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx) as WrappedFn, '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog: string[] = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj as VueTypeDef<T>, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined) {\n          if (\n            this.type === Boolean ||\n            (Array.isArray(this.type) && this.type.includes(Boolean))\n          ) {\n            this.default = undefined\n            return\n          }\n          if (has(this, 'default')) {\n            delete this.default\n          }\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors) as T\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator) as (_v: any) => boolean\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              prevValidator!.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n","import { toType, toValidableType, isInteger, warn } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = <T = any>() => toValidableType<T>('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = <T extends string = string>() =>\n  toValidableType<T>('string', {\n    type: String as unknown as PropType<T>,\n  })\n\nexport const number = <T extends number = number>() =>\n  toValidableType<T>('number', {\n    type: Number as unknown as PropType<T>,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = <T extends number = number>() =>\n  toType<T>('integer', {\n    type: Number as unknown as PropType<T>,\n    validator(value) {\n      const res = isInteger(value)\n      if (res === false) {\n        warn(`integer - \"${value}\" is not an integer`)\n      }\n      return res\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value: unknown) {\n      const res = typeof value === 'symbol'\n      if (res === false) {\n        warn(`symbol - invalid value \"${value}\"`)\n      }\n      return res\n    },\n  })\n\nexport const nullable = () =>\n  Object.defineProperty(\n    {\n      type: null as unknown as PropType<null>,\n      validator(value: unknown) {\n        const res = value === null\n        if (res === false) {\n          warn(`nullable - value should be null`)\n        }\n        return res\n      },\n    },\n    '_vueTypes_name',\n    { value: 'nullable' },\n  )\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef, PropType } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    type: null as unknown as PropType<T>,\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop, PropOptions } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<D, T extends readonly D[] = readonly D[]>(\n  arr: T,\n) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr\n    .map((v: any) => (typeof v === 'symbol' ? v.toString() : v))\n    .join('\", \"')}\".`\n  const base: PropOptions<T[number]> = {\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  }\n  if (arr.indexOf(null) === -1) {\n    const type = arr.reduce((ret, v) => {\n      if (v !== null && v !== undefined) {\n        const constr = (v as any).constructor\n        ret.indexOf(constr) === -1 && ret.push(constr)\n      }\n      return ret\n    }, [] as Prop<T[number]>[])\n\n    if (type.length > 0) {\n      base.type = type\n    }\n  }\n\n  return toType<T[number]>('oneOf', base)\n}\n","import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  D extends V,\n  U extends VueProp<any> | Prop<any> = any,\n  V = InferType<U>,\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n  let hasNullable = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (isVueTypeDef<V>(type, 'oneOf') && type.type) {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isVueTypeDef<V>(type, 'nullable')) {\n        hasNullable = true\n        continue\n      }\n      if (type.type === true || !type.type) {\n        warn('oneOfType - invalid usage of \"true\" and \"null\" as types.')\n        continue\n      }\n      nativeChecks = nativeChecks.concat(type.type)\n    } else {\n      nativeChecks.push(type as Prop<V>)\n    }\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  const typeProp =\n    hasNullable === false && nativeChecks.length > 0 ? nativeChecks : null\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<D>('oneOfType', {\n      type: typeProp as unknown as PropType<D>,\n    })\n  }\n\n  return toType<D>('oneOfType', {\n    type: typeProp as unknown as PropType<D>,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const res = validateType(type, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean = ''\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean = ''\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(obj: {\n  [K in keyof T]: Prop<T[K]> | VueProp<T[K]>\n}): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n  warn,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  nullable,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\nimport { config } from './config'\n\nconst BaseVueTypes = /*#__PURE__*/ (() =>\n  class BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = {}\n\n    static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n    static config = config\n\n    static get any() {\n      return any()\n    }\n    static get func() {\n      return func().def(this.defaults.func)\n    }\n    static get bool() {\n      // prevent undefined to be explicitly set\n      if (this.defaults.bool === undefined) {\n        return bool()\n      }\n      return bool().def(this.defaults.bool)\n    }\n    static get string() {\n      return string().def(this.defaults.string)\n    }\n    static get number() {\n      return number().def(this.defaults.number)\n    }\n    static get array() {\n      return array().def(this.defaults.array)\n    }\n    static get object() {\n      return object().def(this.defaults.object)\n    }\n    static get integer() {\n      return integer().def(this.defaults.integer)\n    }\n    static get symbol() {\n      return symbol()\n    }\n\n    static get nullable() {\n      return nullable()\n    }\n\n    static readonly custom = custom\n    static readonly oneOf = oneOf\n    static readonly instanceOf = instanceOf\n    static readonly oneOfType = oneOfType\n    static readonly arrayOf = arrayOf\n    static readonly objectOf = objectOf\n    static readonly shape = shape\n\n    static extend<T = any>(props: ExtendProps | ExtendProps[]): T {\n      warn(\n        `VueTypes.extend is deprecated. Use the ES6+ method instead. See https://dwightjack.github.io/vue-types/advanced/extending-vue-types.html#extending-namespaced-validators-in-es6 for details.`,\n      )\n      if (isArray(props)) {\n        props.forEach((p) => this.extend(p))\n        return this as any\n      }\n\n      const { name, validate = false, getter = false, ...opts } = props\n\n      if (has(this, name as any)) {\n        throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n      }\n\n      const { type } = opts\n      if (isVueTypeDef(type)) {\n        // we are using as base type a vue-type object\n\n        // detach the original type\n        // we are going to inherit the parent data.\n        delete opts.type\n\n        if (getter) {\n          return Object.defineProperty(this as unknown as T, name, {\n            get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n          })\n        }\n        return Object.defineProperty(this as unknown as T, name, {\n          value(...args: unknown[]) {\n            const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n            if (t.validator) {\n              t.validator = t.validator.bind(t, ...args)\n            }\n            return t\n          },\n        })\n      }\n\n      let descriptor: PropertyDescriptor\n      if (getter) {\n        descriptor = {\n          get() {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            if (validate) {\n              return toValidableType<T>(name, typeOptions)\n            }\n            return toType<T>(name, typeOptions)\n          },\n          enumerable: true,\n        }\n      } else {\n        descriptor = {\n          value(...args: T[]) {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            let ret: VueTypeDef<T>\n            if (validate) {\n              ret = toValidableType<T>(name, typeOptions)\n            } else {\n              ret = toType<T>(name, typeOptions)\n            }\n\n            if (typeOptions.validator) {\n              ret.validator = typeOptions.validator.bind(ret, ...args)\n            }\n            return ret\n          },\n          enumerable: true,\n        }\n      }\n\n      return Object.defineProperty(this as unknown as T, name, descriptor)\n    }\n\n    static utils = {\n      validate<T, U>(value: T, type: U) {\n        return validateType<U, T>(type, value, true) === true\n      },\n      toType<T = unknown>(\n        name: string,\n        obj: PropOptions<T>,\n        validable = false,\n      ): VueTypeDef<T> | VueTypeValidableDef<T> {\n        return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n      },\n    }\n  })()\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes /*#__PURE__*/ extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  nullable,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n  config,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport type { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n","import VueTypes from './index'\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n})\n\nexport default VueTypes\n\nexport * from './index'\n"],"names":["config","silent","logLevel","_excluded","ObjProto","Object","prototype","toString","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","fn","_fn$type","type","match","isPlainObject","_isPlainObject","identity","arg","warn","process","env","NODE_ENV","hasConsole","console","msg","level","obj","prop","call","isInteger","Number","value","isFinite","Math","floor","isArray","Array","isFunction","name","has","_vueTypes_name","isComplexType","some","k","ctx","defineProperty","bind","typeToCheck","valid","expectedType","isVueTypeDef","undefined","required","validateType","map","join","getType","getNativeType","constructor","namePrefix","validator","oldWarn","warnLog","push","length","toType","defineProperties","writable","isRequired","get","this","def","Boolean","includes","assign","bindTo","toValidableType","JSON","stringify","fromType","source","props","descriptors","copy","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","_fn$__original","rest","_objectWithoutPropertiesLoose","prevValidator","__original","indent","string","replace","func","Function","bool","String","number","array","object","integer","res","symbol","nullable","custom","validatorFn","warnMsg","oneOf","arr","TypeError","v","indexOf","reduce","ret","constr","base","i","hasCustomValidators","nativeChecks","concat","hasNullable","filter","t","typeProp","err","arrayOf","values","vResult","every","instanceOf","instanceConstructor","keys","requiredKeys","_obj$key","_this","valueKeys","req","missing","_vueTypes_isLoose","extend","p","validate","_props$validate","getter","_props$getter","opts","descriptor","slice","arguments","typeOptions","enumerable","any","defaults","sensibleDefaults","_class","oneOfType","objectOf","shape","utils","validable","createTypes","defs","_class2","BaseVueTypes","VueTypes","exports"],"mappings":"42BAEaA,IAAMA,EAAmB,CACpCC,QAAQ,EACRC,SAAU,QCJZC,EAAA,CAAA,aAWMC,EAAWC,OAAOC,UAClBC,EAAWH,EAASG,SACbC,EAASJ,EAASK,eAEzBC,EAAkB,qBAGlB,WACJC,GAA8D,IAAAC,EAEpDC,UAAAD,EAAID,aAAAA,EAAAA,EAAqBE,oBAAQF,EAC3C,GAAIE,EAAM,CACR,IAAWC,EAAGD,EAAKN,WAAWO,MAAMJ,GACpC,SAAeI,EAAM,GAAK,EAC3B,CACD,MAAO,EACT,CASaC,IAAAA,EAAgBC,EAAAA,cAahBC,EAAW,SAACC,UAAgBA,CAAA,EAEjCC,EACNF,EAEF,GAA6B,eAAzBG,QAAQC,IAAIC,SAA2B,CACzC,IAAgBC,EAAsB,oBAALC,QACjCL,EAAOI,EACH,SAAcE,EAAaC,QAAAA,IAAAA,IAAAA,EAAQ1B,EAAOE,WAClB,IAAlBF,EAAOC,QACTuB,QAAQE,GAAM,oBAAqBD,EAEvC,EACAR,CACL,CAUM,MAAY,SAAuBU,EAAQC,GAChDpB,OAAAA,EAAOqB,KAAKF,EAAKC,EAAK,EASXE,EACXC,OAAOD,WACP,SAAmBE,GACjB,MACmB,iBAALA,GACZC,SAASD,IACTE,KAAKC,MAAMH,KAAWA,CAE1B,EAQkBI,EAClBC,MAAMD,SACN,SAAiBJ,GACf,MAAgC,mBAAjBzB,EAACsB,KAAKG,EACvB,EASqBM,EAAG,SAAqBN,GAAc,MAClC,wBAAhBH,KAAKG,EAA8B,IAOlB,SAC1BA,EACAO,GAEAxB,OAAAA,EAAciB,IACdQ,EAAIR,EAAO,qBACTO,GAAQP,EAAMS,iBAAmBF,EAAK,EAMhBG,EAAG,SAAIV,GAAU,SAC3BA,KACbQ,EAAIR,EAAO,SACV,CAAC,iBAAkB,YAAa,UAAW,YAAYW,KAAK,SAACC,GAC3DJ,OAAAA,EAAIR,EAAOY,EAAE,GACb,EAaU,WAAOjC,EAA6BkC,GAClD,cAAcC,eAAenC,EAAGoC,KAAKF,GAAmB,aAAc,CACpEb,MAAOrB,GAEX,CAuBM,WACJE,EACAmB,EACA/B,GAEA,IAAuC+C,WAFvC/C,IAAAA,GAAS,GAGT,IAAIgD,GAAQ,EACRC,EAAe,GAIjBF,EAHGjC,EAAcF,GAGHA,EAFA,CAAEA,KAAAA,GAIlB,MAAmBsC,EAAaH,GAC5BA,EAAYP,eAAiB,MAC7B,GAEJ,GAAIC,EAAcM,IAAqC,OAArBA,EAAYnC,KAAe,CAC3D,QAAyBuC,IAArBJ,EAAYnC,OAA2C,IAArBmC,EAAYnC,KAChD,OAAOoC,EAET,IAAKD,EAAYK,eAAsBD,IAAVpB,EAC3B,OACDiB,EACGb,EAAQY,EAAYnC,OACtBoC,EAAQD,EAAYnC,KAAK8B,KACvB,SAAC9B,GAAcyC,OAAoC,IAApCA,EAAazC,EAAMmB,GAAO,EAAc,GAEzDkB,EAAeF,EAAYnC,KACxB0C,IAAI,SAAC1C,GAAS,SAAaA,EAAK,GAChC2C,KAAK,SAKNP,EADmB,WAFrBC,EAAeO,EAAQT,IAGbZ,EAAQJ,GACU,WAAjBkB,EACDnC,EAAciB,GAEL,WAAjBkB,GACiB,WAAjBA,GACiB,YAAjBA,GACiB,aAAjBA,EA9LQQ,SAAc1B,GAC5B,GAAIA,QAAuC,MAAO,GAClD,IAAMlB,EAAQkB,EAAM2B,YAAYpD,WAAWO,MAAMJ,GACjD,OAAYI,EAAGA,EAAM,GAAK,EAC5B,CA4LgB4C,CAAc1B,KAAWkB,EAEzBlB,aAAiBgB,EAAYnC,IAG1C,CAED,IAAKoC,EAAO,CACV,IAASxB,EAAMmC,EAAU,UAAU5B,EAA6BkB,wBAAAA,EAAe,IAC/E,OAAe,IAAXjD,GACFkB,EAAKM,IACE,IAGV,CAED,GAAIe,EAAIQ,EAAa,cAAgBV,EAAWU,EAAYa,WAAY,CACtE,IAAaC,EAAG3C,EACH4C,EAAa,GAQ1B,GAPA5C,EAAO,SAACM,GACNsC,EAAQC,KAAKvC,EACf,EAEAwB,EAAQD,EAAYa,UAAU7B,GAC9Bb,EAAO2C,GAEFb,EAAO,CACV,IAAMxB,GAAOsC,EAAQE,OAAS,EAAI,KAAO,IAAMF,EAAQP,KAAK,QAE5D,OADAO,EAAQE,OAAS,GACF,IAAXhE,GACFkB,EAAKM,GAENwB,GACMxB,CACR,CACF,CACD,OACFwB,CAAA,CAQgBiB,SAAAA,EAAgB3B,EAAcZ,GAC5C,MAA4BtB,OAAO8D,iBAAiBxC,EAAsB,CACxEc,eAAgB,CACdT,MAAOO,EACP6B,UAAU,GAEZC,WAAY,CACVC,IAAG,WAED,OADAC,KAAKlB,UAAW,EAElBkB,IAAA,GAEFC,IAAK,CACHxC,MAAMwC,SAAAA,GACJ,YAAYpB,IAARoB,EAEAD,KAAK1D,OAAS4D,SACbpC,MAAMD,QAAQmC,KAAK1D,OAAS0D,KAAK1D,KAAK6D,SAASD,cAEhDF,KAAI,aAAWnB,IAGbZ,EAAI+B,KAAM,mBACDA,KAAA,QAENA,MAEJjC,EAAWkC,KAA0C,IAAlClB,EAAaiB,KAAMC,GAAK,IAK9CD,KAAI,QADFnC,EAAQoC,GACK,WAAUA,MAAAA,GAAAA,OAAAA,IAChBzD,EAAcyD,GACR,WAAMnE,OAAAA,OAAOsE,OAAO,CAAA,EAAIH,EAAI,EAE5BA,EAGnBD,OAXIpD,EAAQoD,KAAK9B,eAAc,8BAA8B+B,EAAG,KACrDD,KAUX,OAIkB1D,EAAdgD,UAKR,OAJIvB,EAAWuB,KACbhD,EAAKgD,UAAYe,EAAOf,EAAWhD,KAIvC,CAQgBgE,SAAAA,EAAyBtC,EAAcZ,GACrD,IAAMd,EAAOqD,EAAU3B,EAAMZ,GAC7B,OAAatB,OAACyC,eAAejC,EAAM,WAAY,CAC7CmB,MAAMrB,SAAAA,GAWJ,OAVI2B,EAAWiC,KAAKV,YAClB1C,EAEIoD,KAAK9B,eACP,iGAAiGqC,KAAKC,UACpGR,OAINA,KAAKV,UAAYe,EAAOjE,EAAI4D,MACrBA,IACT,GAEJ,UA+BwBS,EAGtBzC,EAAc0C,EAAWC,GAEzB,IA5BsCvD,EAChCwD,EA2BAC,GA5BgCzD,EA4BnBsD,EA3BbE,EAAc,GACpB9E,OAAOgF,oBAAoB1D,GAAK2D,QAAQ,SAACC,GACvCJ,EAAYI,GAAkBlF,OAAOmF,yBAAyB7D,EAAK4D,EACrE,GACalF,OAAC8D,iBAAiB,CAAE,EAAEgB,IA4BnC,GAFAC,EAAK3C,eAAiBF,GAEjBxB,EAAcmE,GACjB,OAAOE,EAET,IA7NqDzE,EACrD8E,EA4NQ5B,EAAuBqB,EAAvBrB,UAAc6B,EAAIC,EAAKT,EAK/B/E,GAAA,GAAImC,EAAWuB,GAAY,CACzB,IAAiB+B,EAAkBR,EAA7BvB,UAEF+B,IACFA,EArOmCjF,QAAvC8E,GADqD9E,EAsO1BiF,GArOFC,kBAAclF,IAAAA,EAAAA,EAAAA,GAwOrCyE,EAAKvB,UAAYe,EACfgB,EACI,SAAmB5D,GACjB,OAEE4D,EAAe/D,KAAK0C,KAAMvC,IAAU6B,EAAUhC,KAAK0C,KAAMvC,EAE7D,EACA6B,EACJuB,EAEH,CAED,OAAa/E,OAACsE,OAAOS,EAAMM,EAC7B,CAEgBI,SAAAA,EAAOC,GACrB,SAAcC,QAAQ,cAAe,KACvC,OC3ZmB,WAAH,OAAiCnB,EAAI,MAAO,CAAE,EAAC,EAE9CoB,EAAG,WAAH,OACApB,EAAI,WAAY,CAC7BhE,KAAMqF,UACN,EAESC,EAAO,WAClBtB,OAAAA,EAAgB,UAAW,CACzBhE,KAAM4D,SACN,IAEkB,WAAH,OACFI,EAAI,SAAU,CAC3BhE,KAAMuF,QACN,EAEeC,EAAG,WACpBxB,OAAAA,EAAmB,SAAU,CAC3BhE,KAAMkB,QACN,EAESuE,EAAQ,WAAH,OACDzB,EAAM,QAAS,CAC5BhE,KAAMwB,OACN,EAEekE,EAAG,WACpB1B,OAAAA,EAAmB,SAAU,CAC3BhE,KAAMR,QACN,EAEgBmG,EAAG,WACrBtC,OAAAA,EAAU,UAAW,CACnBrD,KAAMkB,OACN8B,UAAU7B,SAAAA,GACR,IAAMyE,EAAM3E,EAAUE,GAItB,OAHY,IAARyE,GACFtF,EAAmBa,cAAAA,EACpB,uBACMyE,CACT,GACA,EAEeC,EAAG,WAAH,OACXxC,EAAS,SAAU,CACvBL,UAAU7B,SAAAA,GACR,IAAMyE,EAAuB,mBAI7B,OAHY,IAARA,GACFtF,EAAgCa,2BAAAA,EACjC,KACMyE,CACT,GACA,EAESE,EAAW,WAAH,OACbtG,OAACyC,eACL,CACEjC,KAAM,KACNgD,UAAS,SAAC7B,GACR,IAASyE,EAAa,OAAVzE,EAIZ,OAHY,IAARyE,GACFtF,EACD,mCACMsF,CACT,GAEF,iBACA,CAAEzE,MAAO,YACV,ECrEqB,SAAM4E,EAC5BC,EACAC,GAEA,QAFAA,IAAAA,IAAAA,EAAU,4BAEiB,mBAALD,EACpB,MAAM,cACJ,6DAIJ,SAAiBA,EAAYtE,MAAQ,yBAA0B,CAC7D1B,KAAM,KACNgD,UAAS,SAAsB7B,GAC7B,IAAWiB,EAAG4D,EAAY7E,GAE1B,OADKiB,GAAO9B,EAAQoD,KAAK9B,eAAc,MAAMqE,GAE/C7D,CAAA,GAEJ,UClB6B8D,EAC3BC,GAEA,IAAK5E,EAAQ4E,GACX,MAAUC,IAAAA,UACR,4DAGJ,IAAMxF,qCAAyCuF,EAC5CzD,IAAI,SAAC2D,GAAY,MAAa,mBAAWA,EAAE3G,WAAa2G,CAAC,GACzD1D,KAAK,eAC6B,CACnCK,UAAU7B,SAAAA,GACR,OAAsC,IAAxBgF,EAAIG,QAAQnF,GAE1B,OADKiB,GAAO9B,EAAKM,GACVwB,CACT,GAEF,IAA2B,IAAvB+D,EAAIG,QAAQ,MAAc,CAC5B,IAAUtG,EAAGmG,EAAII,OAAO,SAACC,EAAKH,GAC5B,GAAIA,QAA+B,CACjC,MAAgBA,EAAUvD,aACD,IAAzB0D,EAAIF,QAAQG,IAAkBD,EAAIrD,KAAKsD,EACxC,CACD,OACFD,CAAA,EAAG,IAECxG,EAAKoD,OAAS,IAChBsD,EAAK1G,KAAOA,EAEf,CAED,OAAOqD,EAAkB,QAASqD,EACpC,CCxBwB,WAItBP,GACA,IAAK5E,EAAQ4E,GACX,MAAUC,IAAAA,UACR,2DASJ,IALA,OAA0B,KACR,IAEY,GAEpBO,EAAG,EAAGA,EAAIR,EAAI/C,OAAQuD,GAAK,EAAG,CACtC,IAAM3G,EAAOmG,EAAIQ,GACjB,GAAI9E,EAAiB7B,GAAO,CAI1B,GAHIyB,EAAWzB,EAAKgD,aAClB4D,GAAsB,GAEpBtE,EAAgBtC,EAAM,UAAYA,EAAKA,KAAM,CAC/C6G,EAAeA,EAAaC,OAAO9G,EAAKA,MACxC,QACD,CACD,GAAIsC,EAAgBtC,EAAM,YAAa,CACrC+G,GAAc,EACd,QACD,CACD,IAAkB,IAAd/G,EAAKA,OAAkBA,EAAKA,KAAM,CACpCM,EAAK,4DACL,QACD,CACDuG,EAAeA,EAAaC,OAAO9G,EAAKA,KACzC,MACC6G,EAAa1D,KAAKnD,EAErB,CAGD6G,EAAeA,EAAaG,OAAO,SAACC,EAAGN,GAAC,OAAiBE,EAACP,QAAQW,KAAON,CAAC,GAE1E,IAAcO,GACI,IAAhBH,GAAyBF,EAAazD,OAAS,EAAIyD,EAAe,KAEpE,OAQaxD,EAAI,YARZuD,EAQyB,CAC5B5G,KAAMkH,EACNlE,mBAAU7B,GACR,MAAsB,KACRgF,EAAIrE,KAAK,SAAC9B,GACtB,IAAS4F,EAAGnD,EAAazC,EAAMmB,GAAO,GAItC,MAHmB,iBAALyE,GACZuB,EAAIhE,KAAKyC,IAEI,IAALA,CACZ,GAUA,OARKxD,GACH9B,EAAI,wDAEA6G,EAAI/D,OACqB6B,2BAAAA,EAAOkC,EAAIxE,KAAK,QAKjDP,CAAA,GA1B8B,CAC5BpC,KAAMkH,GA2BZ,CCtFwBE,SAAAA,EAA4CpH,GAClE,OAAOqD,EAAuB,UAAW,CACvCrD,KAAMwB,MACNwB,UAAUqE,SAAAA,GACR,IAAWC,EAAqB,KAClBD,EAAOE,MAAM,SAACpG,GAE1B,OAAmB,KADnBmG,EAAU7E,EAAazC,EAAMmB,GAAO,GAEtC,GAIA,OAHKiB,GACH9B,EAA2C2E,sCAAAA,EAAOqC,IAGtDlF,CAAA,GAEJ,CCfwBoF,SAAAA,EACtBC,GAEA,OAAOpE,EAAwB,aAAc,CAC3CrD,KAAMyH,GAEV,CCNwB,WAA6CzH,GACnE,SAA+C,WAAY,CACzDA,KAAMR,OACNwD,UAAUlC,SAAAA,GACR,MAAgC,GAC1BsB,EAAQ5C,OAAOkI,KAAK5G,GAAKyG,MAAM,SAAC7C,GAEpC,OAAmB,KADnB4C,EAAU7E,EAAazC,EAAMc,EAAI4D,IAAM,GAEzC,GAKA,OAHKtC,GACH9B,EAAI,uCAAwC2E,EAAOqC,IAGvDlF,CAAA,GAEJ,CCfwB,WAAwBtB,GAG9C,IAAM4G,EAAOlI,OAAOkI,KAAK5G,GACnB6G,EAAeD,EAAKV,OAAO,SAACtC,GAAQ,IAAAkD,EAAA,QAAG,QAAA9G,EAAAA,EAAY4D,UAAZ,IAAAkD,IAAAA,EAAkBpF,SAAS,GAElExC,EAAOqD,EAAO,QAAS,CAC3BrD,KAAMR,OACNwD,UAAwD7B,SAAAA,GAAK,IAAA0G,EAAAnE,KAC3D,IAAKxD,EAAciB,GACjB,OAAO,EAET,IAAe2G,EAAGtI,OAAOkI,KAAKvG,GAG9B,GACEwG,EAAavE,OAAS,GACtBuE,EAAa7F,KAAK,SAACiG,UAAoC,IAAnBD,EAACxB,QAAQyB,EAAW,GACxD,CACA,IAAMC,EAAUL,EAAaX,OAC3B,SAACe,GAAQD,OAA4B,IAA5BA,EAAUxB,QAAQyB,EAAW,GAYxC,OATEzH,EADqB,IAAnB0H,EAAQ5E,OACN,8BAA+B4E,EAAQ,GAAE,oBAEzC,gCAC8BA,EAAQrF,KACtC,QACD,wBAKN,CAED,OAAgBmF,EAACP,MAAM,SAAC7C,GACtB,IAA2B,IAAvBgD,EAAKpB,QAAQ5B,GACf,OAAyD,IAApDmD,EAA8BI,oBAEnC3H,EACkDoE,gDAAAA,EAAiCgD,8BAAAA,EAAK/E,KACpF,eAIL,GACD,IACMP,EAAQK,EADA3B,EAAY4D,GACOvD,EAAMuD,IAAM,GAI7C,MAHqB,iBAALtC,GACd9B,EAAI,YAAaoE,EAAG,kCAAkCO,EAAO7C,KAE9C,IAAVA,CACT,EACF,IAeF,OAZA5C,OAAOyC,eAAejC,EAAM,oBAAqB,CAC/CuD,UAAU,EACVpC,OAAO,IAGT3B,OAAOyC,eAAejC,EAAM,QAAS,CACnCyD,IAAG,WAED,OADAC,KAAKuE,mBAAoB,MAE3B,IAIJjI,CAAA,mDC9BoC,WAoDzBkI,IAAAA,EAAAA,OAAAA,eAAAA,WAAAA,SAAAA,IAAAA,QAAAA,EAAAA,OAAP,SAAuB7D,GAAkC,IAAAwD,EAAAnE,KAIvD,GAHApD,EAEC,gMACGiB,EAAQ8C,GAEV,OADAA,EAAMI,QAAQ,SAAC0D,GAAM,OAAAN,EAAKK,OAAOC,EAAE,GAC5BzE,KAGT,IAAQhC,EAAoD2C,EAApD3C,KAAoD2C,EAAAA,EAA9C+D,SAAAA,OAAW,IAAAC,GAAmChE,EAAAA,EAAAA,EAA5BiE,OAAAA,OAAM,IAAAC,GAAaC,EAAAA,IAASnE,EAAK/E,GAEjE,GAAIqC,EAAI+B,KAAMhC,GACZ,MAAU0E,IAAAA,UAAqC1E,2BAAAA,EAChD,qBAED,IAwBI+G,EAxBQzI,EAAKwI,EAATxI,KACR,OAAIsC,EAAatC,aAKHA,KAGHR,OAAOyC,eAAeyB,KAAsBhC,EADjD4G,EACuD,CACvD7E,IAAK,WAAMU,OAAAA,EAASzC,EAAM1B,EAAMwI,EAAkC,GAGb,CACvDrH,MAAwB,WACtB,IAEE8F,EAFKA,EAAG9C,EAASzC,EAAM1B,EAAMwI,GAI/B,OAHIvB,EAAEjE,YACJiE,EAAEjE,aAAYiE,EAAEjE,WAAUd,cAAK+E,GAACH,OAAA,GAAA4B,MAAA1H,KAAA2H,cAE3B1B,CACT,MAMFwB,EADEH,EACW,CACX7E,eACE,MAAoBjE,OAAOsE,OAAO,CAAA,EAAI0E,GACtC,OAAIJ,EACoBpE,EAAItC,EAAMkH,KAEjBlH,EAAMkH,EACzB,EACAC,YAAY,GAGD,CACX1H,MAAkB,WAChB,IACsBqF,EAQpBA,EATeoC,EAAGpJ,OAAOsE,OAAO,CAAE,EAAE0E,GAWtC,OAREhC,EADE4B,EACIpE,EAAmBtC,EAAMkH,GAEzBvF,EAAU3B,EAAMkH,GAGpBA,EAAY5F,YACdwD,EAAIxD,aAAY4F,EAAY5F,WAAUd,cAAKsE,GAAGM,OAAA,GAAA4B,MAAA1H,KAAA2H,cAGlDnC,CAAA,EACAqC,YAAY,GAIHrJ,OAACyC,eAAeyB,KAAsBhC,EAAM+G,GAC3D,2BApHA,WACE,OAAUK,GACZ,GACA,CAAApE,IAAA,OAAAjB,IAAA,WACE,OAAO2B,IAAOzB,IAAID,KAAKqF,SAAS3D,KAClC,GAAC,CAAAV,IAAA,OAAAjB,IACD,WAEE,YAA2BlB,IAAvBmB,KAAKqF,SAASzD,SAGPA,IAAG3B,IAAID,KAAKqF,SAASzD,KAClC,GACA,CAAAZ,IAAA,SAAAjB,IAAA,WACE,OAAOyB,IAASvB,IAAID,KAAKqF,SAAS7D,OACpC,GAAC,CAAAR,IAAA,SAAAjB,IACD,WACE,WAAgBE,IAAID,KAAKqF,SAASvD,OACpC,GAAC,CAAAd,IAAA,QAAAjB,IACD,WACE,WAAeE,IAAID,KAAKqF,SAAStD,MACnC,qBACA,WACE,OAAaC,IAAG/B,IAAID,KAAKqF,SAASrD,OACpC,GACA,CAAAhB,IAAA,UAAAjB,IAAA,WACE,OAAOkC,IAAUhC,IAAID,KAAKqF,SAASpD,QACrC,GACA,CAAAjB,IAAA,SAAAjB,IAAA,WACE,OAAOoC,GACT,GAAC,CAAAnB,IAAA,WAAAjB,IAED,WACE,UACF,OAUOyE,KAlDAa,SAAsC,CAAA,EAEtCC,EAAAA,0BAEA7J,OAASA,EAsCA4G,EAAAA,OAASA,EAAMkD,EACf/C,MAAQA,IACRsB,WAAaA,EACb0B,EAAAA,UAAYA,EAASD,EACrB7B,QAAUA,EAAO6B,EACjBE,SAAWA,IACXC,MAAQA,EA4EjBC,EAAAA,MAAQ,CACbjB,kBAAejH,EAAUnB,GACvB,OAAiD,IAA9ByC,EAAOzC,EAAMmB,GAAO,EACzC,EACAkC,OAAM,SACJ3B,EACAZ,EACAwI,GAEA,YAFS,IAATA,IAAAA,GAAY,GAEIA,EAAGtF,EAAmBtC,EAAMZ,GAAOuC,EAAU3B,EAAMZ,EACrE,KAxI8B,GA4IpC,SAAoByI,EAACC,GAAAA,IAAAA,EACnB,gBADmBA,IAAAA,ECrLgC,CACnDpE,KAAM,WAAe,EACrBE,MAAM,EACNJ,OAAQ,GACRM,OAAQ,EACRC,MAAO,WAAM,MAAA,EAAE,EACfC,OAAQ,WAAO,MAAA,CAAA,CAAE,EACjBC,QAAS,iFDgMN,oDAdD,WACE,YAAYjC,KAAKqF,SACnB,MAEA,SAA4B1C,GAS1B3C,KAAKqF,UARK,IAAN1C,EAQiBA,EAAAA,CAAAA,GAJX,IAANA,EAIiBA,EAHEmD,GAJL,CAAE,CAQtB,KAACC,CAAA,EAjBkBC,GACZX,EAAAA,cAA2CS,GAAIC,CAkB1D,CAEqBE,IAAAA,eAA+BJ,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,IAAAA,CAAAA,OAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA,KE5MpD/J,OAAOyC,eAAe2H,QAAS,aAAc,CAC3CzI,OAAO"}