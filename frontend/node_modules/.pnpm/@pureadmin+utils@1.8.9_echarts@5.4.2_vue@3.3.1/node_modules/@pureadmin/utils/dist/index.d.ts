import { Ref, ComputedRef, Plugin, AppContext, Component } from 'vue';
import { ECharts, EChartsOption } from 'echarts';
import * as _vue_reactivity from '@vue/reactivity';
import * as echarts_types_dist_echarts from 'echarts/types/dist/echarts';

/**
 * @description 在数值后加 `.00`
 * @param val
 * @returns 加完 `.00` 后的值
 */
declare const addZero: (val: any) => string | boolean;
/**
 * @description 分转元
 * @param val 分
 * @param format 转元后像 `10` 、`20`、 `100` 、`1000` 这种整金额默认会在末尾加 `.00` ，如果不想要设置成 `fasle` 即可
 * @returns 元
 */
declare const centsToDollars: (val: any, format?: boolean) => any;
/**
 * @description 元转分
 * @param val 元
 * @param digit 转换倍数，默认 `100`
 * @returns 分
 */
declare const dollarsToCents: (val: number, digit?: number) => number;
/**
 * @description 获取数值的小数位数
 * @param val 数值
 * @returns 小数位数
 */
declare const getDecimalPlaces: (val: string | number) => number;
/**
 * @description 金额转大写汉字（支持小数位）
 * @param val 金额
 * @param format 整 （如果是整数金额最后面会默认加个 `整`，不想要的话给空字符串 `""`）
 * @returns 大写汉字金额
 */
declare const priceUppercase: (val: any, format?: string) => string;
/**
 * @description 格式化金额，三位加一个逗号（如果是整数后加 `.00`，如果是小数保留两位小数，小数超过两位四舍五入保留两位小数）
 * @param num 金额
 * @returns 格式化后的金额
 */
declare const priceToThousands: (num: any) => string | undefined;

/**
 * Promise, or maybe not
 */
type Awaitable<T> = T | PromiseLike<T>;
/**
 * Null or whatever
 */
type Nullable<T> = T | null | undefined;
/**
 * Array, or not yet
 */
type Arrayable<T> = T | Array<T>;
/**
 * Function
 */
interface Fn<T = any, R = T> {
    (...arg: T[]): R;
}
/**
 * Constructor
 */
type Constructor<T = void> = new (...args: any[]) => T;
/**
 * Infers the element type of an array
 */
type ElementOf<T> = T extends (infer E)[] ? E : never;
/**
 * RefType
 */
type RefType<T> = T | null;
/**
 * Record
 */
type Recordable<T = any> = Record<string, T>;
/**
 * ReadonlyRecordable
 */
type ReadonlyRecordable<T> = Readonly<Record<string, T>>;
/**
 * ComponentElRef
 */
interface ComponentElRef<T extends HTMLElement = HTMLDivElement> {
    $el: T;
}
/**
 * ComponentRef
 */
type ComponentRef<T extends HTMLElement = HTMLDivElement> = ComponentElRef<T> | null;
/**
 * ElRef
 */
type ElRef<T extends HTMLElement = HTMLDivElement> = Nullable<T>;
/**
 * Defines an intersection type of all union items.
 *
 * @param U Union of any types that will be intersected.
 * @returns U items intersected
 * @see https://stackoverflow.com/a/50375286/9259330
 */
type UnionToIntersection<U> = (U extends unknown ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
/**
 * Infers the arguments type of a function
 */
type ArgumentsType<T> = T extends (...args: infer A) => any ? A : never;
type MergeInsertions<T> = T extends object ? {
    [K in keyof T]: MergeInsertions<T[K]>;
} : T;
type DeepMerge<F, S> = MergeInsertions<{
    [K in keyof F | keyof S]: K extends keyof S & keyof F ? DeepMerge<F[K], S[K]> : K extends keyof S ? S[K] : K extends keyof F ? F[K] : never;
}>;
interface GlobalUtilsPropertiesApi {
    $echarts: ECharts;
}
/**
 * color.ts
 */
type ColorType = "rgb" | "hex" | "hsl";
interface ColorOptions {
    /** 颜色格式 `rgb` 、 `hex` 、 `hsl` ，默认 `rgb` */
    type?: ColorType;
    /** 生成颜色的数量。指定数量，则返回生成颜色数组，数量为 `0` 或不指定，返回生成颜色字符串 */
    num?: number;
}
/**
 * date.ts
 */
type dateType = 1 | 2 | 3;
interface currentDateType {
    /** 当前年月日 */
    ymd: string;
    /** 当前时分秒 */
    hms: string;
    /** 当前周几 */
    week: string;
}
interface currentDateOpt {
    /** 当前返回的年月日和时分秒的格式 1：汉字模式（默认） 2：- 连接符 3：/ 连接符  */
    type?: dateType;
    /** 自定义 `week` 返回格式前缀，默认 `星期` */
    prefix?: string;
}
/**
 * debounce.ts
 */
type TimeoutHandle = ReturnType<typeof setTimeout> | null;
type FunctionArgs<Args extends any[] = any[], Return = void> = (...args: Args) => Return;
/**
 * device.ts
 */
interface DeviceType {
    match: Fn;
}
interface BrowserType {
    /** 浏览器型号 */
    browser: string;
    /** 浏览器版本 */
    version: string;
}
/**
 * banMouseEvent.ts
 * @param "contextmenu"  右键
 * @param "selectstart"  选择
 * @param "copy"  拷贝
 */
type MouseEvent = "contextmenu" | "selectstart" | "copy";
/**
 * link.ts
 * @param "_blank"     在新窗口中打开被链接文档（默认）
 * @param "_self"      在相同的框架中打开被链接文档
 * @param "_parent"    在父框架集中打开被链接文档
 * @param "_top"       在整个窗口中打开被链接文档
 * @param "framename"  在指定的框架中打开被链接文档
 */
type Target = "_blank" | "_self" | "_parent" | "_top" | "framename";
/**
 * packageSize.ts
 */
interface packageOpt {
    /** 文件夹名（默认：`dist`） */
    folder?: string;
    /** 是否返回已经转化好单位的包总大小（默认：`true`） */
    format?: boolean;
    /** 回调函数，返回包总大小（单位：字节） */
    callback: CallableFunction;
}
/**
 * @description 获取指定文件夹中所有文件的总大小
 */
declare const getPackageSize: (options: packageOpt) => void;
/**
 * performance.ts
 */
interface Performance {
    /** DNS查询耗时（单位：秒） */
    dns: number;
    /** TCP连接耗时（单位：秒） */
    tcp: number;
    /** Request请求耗时（单位：秒） */
    request: number;
    /** 解析Dom树耗时（单位：秒） */
    dom: number;
    /** 白屏时长（单位：秒） */
    whiteScreen: number;
}
/**
 * storage.ts
 */
interface ProxyStorage {
    setItem<T>(k: string, v: T): void;
    getItem<T>(k: string): T;
    removeItem(k: string): void;
    clear(): void;
}
/**
 * useEcharts.ts
 */
type ToolTipType = "x" | "y" | true;
type Theme = "light" | "dark" | "default";
declare type ElementEventType = "echarts" | "zrender";
declare type ElementEventName = "click" | "dblclick" | "mousewheel" | "mouseout" | "mouseover" | "mouseup" | "mousedown" | "mousemove" | "contextmenu" | "drag" | "dragstart" | "dragend" | "dragenter" | "dragleave" | "dragover" | "drop" | "globalout";
interface EchartOptions {
    /** 主题色（可选，默认`default`） */
    theme?: Ref<Theme> | ComputedRef<Theme>;
    /** 给`x`、`y`轴添加`Tooltip`文字提示的元素id，默认`tooltipElement` */
    tooltipId?: string;
}
interface OptionsParams {
    /** `echarts事件（默认）`、`zrender事件` */
    type?: ElementEventType;
    /** 事件类型名称 `必传` */
    name: ElementEventName;
    /** query属性 可选 */
    query?: string | Object;
    /** 回调函数，返回params参数 `必传` */
    callback: Fn;
}
interface LoadOpts {
    type?: string;
    opts?: {
        text?: string;
        color?: string;
        textColor?: string;
        maskColor?: string;
        zlevel?: number;
        /** 字体大小。从 `v4.8.0` 开始支持 */
        fontSize?: number;
        /** 是否显示旋转动画（spinner）。从 `v4.8.0` 开始支持 */
        showSpinner?: boolean;
        /** 旋转动画（spinner）的半径。从 `v4.8.0` 开始支持 */
        spinnerRadius?: number;
        /** 旋转动画（spinner）的线宽。从 `v4.8.0` 开始支持 */
        lineWidth?: number;
        /** 字体粗细。从 `v5.0.1` 开始支持 */
        fontWeight?: string;
        /** 字体风格。从 `v5.0.1` 开始支持 */
        fontStyle?: string;
        /** 字体系列。从 `v5.0.1` 开始支持 */
        fontFamily?: string;
    };
}
interface AppendDataOpts {
    /** 要增加数据的系列序号 */
    seriesIndex?: string | number;
    /** 增加的数据 */
    data?: Array<any>;
}
interface DataURL {
    /** 导出的格式，可选 png, jpg, svg（注意：png, jpg 只有在 canvas 渲染器的时候可使用，svg 只有在使用 svg 渲染器的时候可用） */
    type?: string;
    /** 导出的图片分辨率比例，默认为 1 */
    pixelRatio?: number;
    /** 导出的图片背景色，默认使用 option 里的 backgroundColor */
    backgroundColor?: string;
    /** 忽略组件的列表，例如要忽略 toolbox 就是 ['toolbox'] */
    excludeComponents?: Array<string>;
}
interface EventParams {
    componentIndex?: number;
    /** 当前点击的图形元素所属的组件名称，其值如 'series'、'markLine'、'markPoint'、'timeLine' 等 */
    componentType: string;
    /** 系列类型。值可能为：'line'、'bar'、'pie' 等。当 componentType 为 'series' 时有意义 */
    seriesType: string;
    /** 系列在传入的 option.series 中的 index。当 componentType 为 'series' 时有意义 */
    seriesIndex: number;
    /** 系列名称。当 componentType 为 'series' 时有意义 */
    seriesName: string;
    /** 数据名，类目名 */
    name: string;
    /** 数据在传入的 data 数组中的 index */
    dataIndex: number;
    /** 传入的原始数据项 */
    data: Object;
    /** sankey、graph 等图表同时含有 nodeData 和 edgeData 两种 data，dataType 的值会是 'node' 或者 'edge'，表示当前点击在 node 还是 edge 上，其他大部分图表中只有一种 data，dataType 无意义 */
    dataType: string;
    event?: any;
    type?: string;
    targetType?: string;
    /** 传入的数据值 */
    value: string | number | Array<string | number>;
    /** 数据图形的颜色。当 componentType 为 'series' 时有意义 */
    color: string;
}
interface UtilsEChartsOption extends EChartsOption {
    /** 清空当前实例，会移除实例中所有的组件和图表，一般用于动态渲染，默认：`true` */
    clear?: Boolean;
    /** 给`x`、`y`轴添加`Tooltip`文字提示，一般用于文字太长，`x`代表`x轴`   `y`代表`y轴`   `true`(默认)代表`x、y轴`（该属性生效的前提是将 `xAxis` 或者 `yAxis` 添加`triggerEvent: true`属性，用到哪个添加哪个） */
    addTooltip?: ToolTipType;
    /** `window.onresize` 时改变图表尺寸的延时时间，单位毫秒，默认 `300` 毫秒。当您的 `echarts` 在拖拉窗口时不会自适应（一般不会出现这种情况），可以调整 `delay` 数值到自适应为止 */
    delay?: number;
}
/**
 * useScript.ts
 */
declare type documentCarrier = "body" | "head";
declare type TagName = "link" | "script";
declare type TagNameLink = "href" | "src";
interface LoadType {
    tag: TagName;
    link: TagNameLink;
}
interface OptionsScript {
    src: string;
    carrier?: documentCarrier;
}
/**
 * useWatermark.ts
 */
interface gradientType {
    /** 范围 `0.0` 到 `1.0` https://www.runoob.com/tags/canvas-addcolorstop.html */
    value: number;
    /** 对应 `value` 范围的文本颜色 */
    color: string;
}
interface attr {
    /** 字体，默认 `15px Reggae One` */
    font?: string;
    /** 填充绘制图形的颜色，默认 `rgba(0, 0, 0, 0.15)` */
    fillStyle?: string;
    /** 宽度，默认 `250` */
    width?: number;
    /** 高度，默认 `100` */
    height?: number;
    /** 水印整体的旋转，默认 `-10` */
    rotate?: number;
    /** 水印的 `z-index`，默认 `100000` */
    zIndex?: string;
    /** 开始绘制文本的 `x` 坐标位置（相对于画布） https://www.runoob.com/jsref/met-canvas-filltext.html */
    fillTextWidth?: number;
    /** 开始绘制文本的 `y` 坐标位置（相对于画布） https://www.runoob.com/jsref/met-canvas-filltext.html */
    fillTextHeight?: number;
    /** 绘制文本渐变色，优先级高于 `fillStyle` */
    gradient?: Array<gradientType>;
    /** 创建阴影（四个参数，如下）
     *  第一个填 `shadowBlur`，`必填`，具体设置看：https://www.runoob.com/jsref/prop-canvas-shadowblur.html
     *  第二个填 `shadowColor`，`可选，默认#000000`，具体设置看：https://www.runoob.com/jsref/prop-canvas-shadowcolor.html
     *  第三个填 `shadowOffsetX`，`可选，默认0`，具体设置看：https://www.runoob.com/jsref/prop-canvas-shadowoffsetx.html
     *  第四个填 `shadowOffsetY`，`可选，默认0`，具体设置看：https://www.runoob.com/jsref/prop-canvas-shadowoffsety.html
     */
    shadowConfig?: Array<any>;
    /** 透明度，范围 `0.0`（完全透明） 到 `1.0` */
    globalAlpha?: number;
    /** 是否让水印无法删除，默认`false`，开启后在控制台操作对应的 `Elements` 也无法删除 */
    forever?: boolean;
}
/**
 * useAttrs.ts
 */
interface AttrParams {
    excludeListeners?: boolean;
    excludeKeys?: string[];
}
/**
 * is.ts
 */
interface isParams {
    /** 自定义 `unicode`，不会覆盖默认的 `unicode` */
    unicode?: string;
    /** 自定义 `unicode`，会覆盖默认的 `unicode` */
    replaceUnicode?: string;
    /** 是否全部是中文，默认 `false` */
    all?: boolean;
    /** 是否删除全部空格，默认 `false` */
    pure?: boolean;
}

/**
 * @description 禁止指定的鼠标事件
 * @param eventList 鼠标事件（ `contextmenu` ：右键、 `selectstart` ：选择、 `copy` ：拷贝）
 */
declare const banMouseEvent: (eventList: Array<MouseEvent>) => void;
/**
 * @description 允许指定的鼠标事件
 * @param eventList 鼠标事件（ `contextmenu` ：右键、 `selectstart` ：选择、 `copy` ：拷贝）
 */
declare const allowMouseEvent: (eventList: Array<MouseEvent>) => void;

/**
 * @description `base64` 转 `blob`
 * @param base64Buf `base64`
 */
declare function dataURLtoBlob(base64Buf: string): Blob;
/**
 * @description 图片 `url` 转 `base64`
 * @param url 图片 `url`
 * @param mineType 图片格式，默认为 `image/png`
 * @param encoderOptions `0` 到 `1` 之间的取值，主要用来选定图片的质量，默认值是 `0.92`，超出范围也会选择默认值
 */
declare function urlToBase64(url: string, mineType?: string, encoderOptions?: number): Promise<string>;

/**
 * @description 判断元素是否存在指定类名
 * @param element 当前类名的元素
 * @param name 类名
 * @returns `boolean`
 */
declare const hasClass: (element: HTMLElement | Element, name: string) => boolean;
/**
 * @description 向当前元素添加指定类名
 * @param element 当前元素
 * @param name 类名
 * @param extraName 额外类名（可选）
 */
declare const addClass: (element: HTMLElement | Element, name: string, extraName?: string) => void;
/**
 * @description 删除当前元素的指定类名
 * @param element 当前元素
 * @param name 类名
 * @param extraName 额外类名（可选）
 */
declare const removeClass: (element: HTMLElement | Element, name: string, extraName?: string) => void;
/**
 * @description 是否向当前元素添加指定类名
 * @param bool `boolean`
 * @param name 类名
 * @param element 当前元素（可选，如果不填，默认 `document.body` ）
 */
declare const toggleClass: (bool: boolean, name: string, element?: HTMLElement | Element) => void;
/**
 * @description 获取当前元素的所有类名
 * @param element 当前元素
 * @returns `string`、`string[]` 当前元素的所有类名，如果只有一个类名，返回字符串，如果有多个，返回字符串数组
 */
declare const getClass: (element: HTMLElement | Element) => string | string[];

/**
 * @description 判断对象自身属性中是否具有指定的属性
 * @param  obj 要判断的对象
 * @param  key 指定的属性
 * @return boolean
 */
declare function hasOwnProp(obj: object, key: string | number): boolean;
/**
 * @description 浅拷贝/深拷贝
 * @param val 需要拷贝的值
 * @param deep 是否深拷贝（默认 `false` 浅拷贝）
 * @return 拷贝后的值
 */
declare function clone(val: any, deep?: boolean): any;
/**
 * @description 深拷贝
 * @param val 需要拷贝的值
 * @return 拷贝后的值
 */
declare function cloneDeep(val: any): any;

/**
 * @description 随机生成颜色
 * @param type 颜色格式 `rgb` 、 `hex` 、 `hsl` ，默认 `rgb`
 * @param num 生成颜色的数量。指定数量，则返回生成颜色数组，数量为 `0` 或不指定，返回生成颜色字符串
 * @returns 生成的颜色
 */
declare const randomColor: (options?: ColorOptions) => string | Array<string>;
/**
 * @description `hex` 转 `rgb`
 * @param str `hex`
 * @returns `rgb`
 */
declare const hexToRgb: (str: string) => Array<number>;
/**
 * @description `rgb` 转 `hex`
 * @param r  红(R)
 * @param g  绿(G)
 * @param b  蓝(B)
 * @returns `hex`
 */
declare const rgbToHex: (r: number, g: number, b: number) => string;
/**
 * @description 颜色值加深
 * @param color `hex` 格式
 * @param level 色值度
 * @returns 加深后的颜色值，`hex` 格式
 */
declare const darken: (color: string, level: number) => string;
/**
 * @description 颜色值变浅
 * @param color `hex` 格式
 * @param level 色值度
 * @returns 变浅后的颜色值，`hex` 格式
 */
declare const lighten: (color: string, level: number) => string;

/**
 * @description 将`Windows`反斜杠路径转换为斜杠路径
 * @param path 路径地址
 * @returns 斜杠路径
 */
declare function convertPath(path: string): string;

/**
 * @description 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02) 的转换 （即 百度 转 谷歌、高德）
 * @param lng 经度
 * @param lat 纬度
 * @returns 经、纬度组成的数组
 */
declare function bd09togcj02(lng: number, lat: number): Array<number>;
/**
 * @description 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换 （即 谷歌、高德 转 百度）
 * @param lng 经度
 * @param lat 纬度
 * @returns 经、纬度组成的数组
 */
declare function gcj02tobd09(lng: number, lat: number): Array<number>;
/**
 * @description WGS-84 转 GCJ-02
 * @param lng 经度
 * @param lat 纬度
 * @returns 经、纬度组成的数组
 */
declare function wgs84togcj02(lng: number, lat: number): Array<number>;
/**
 * @description GCJ-02 转换为 WGS-84
 * @param lng 经度
 * @param lat 纬度
 * @returns 经、纬度组成的数组
 */
declare function gcj02towgs84(lng: number, lat: number): Array<number>;
/**
 * @description 判断是否是国外（非中国）坐标
 * @see 中国的经纬度范围大约为：经度 `73.66` ~ `135.05`、纬度 `3.86` ~ `53.55` {@link https://zhidao.baidu.com/question/1244677296430089899.html}
 * @param lng 经度
 * @param lat 纬度
 * @returns `boolean`
 */
declare function out_of_china(lng: number, lat: number): boolean;

/**
 * @description 获取格式化后的当前日期
 * @param format 日期格式化
 * @returns 格式化后的当前日期
 */
declare function dateFormat(format: string): string;
/**
 * @description 获取当前是星期几
 * @param prefix 自定义前缀（默认显示`星期`）
 * @returns 星期几
 */
declare function getCurrentWeek(prefix?: string): string;
/**
 * @description 获取指定日期月份的总天数
 * @param time 指定日期月份
 * @returns 总天数
 */
declare function monthDays(time: Date | string): number;
/**
 * @description 获取从当前年份到开始年份的数组
 * @param start 开始年份
 * @returns 年份数组
 */
declare function createYear(start: number): Array<number>;
/**
 * @description 获取当前的日期
 * @param options `type` 当前返回的年月日和时分秒的格式 `1`：`年月日`模式（默认） `2`：`-` 连接符 `3`：`/` 连接符
 * @returns 当前的日期对象
 */
declare function getCurrentDate(options?: currentDateOpt): currentDateType;

/**
 * @description 延迟函数
 * @param timeout 延迟时间（毫秒），默认 `20`
 * @returns Promise
 */
declare const delay: (timeout?: number) => Promise<unknown>;
/**
 * @description 防抖函数
 * @param fn 函数
 * @param timeout 延迟时间（毫秒），默认 `200`
 * @param immediate 是否立即执行，默认 `false`
 */
declare const debounce: <T extends FunctionArgs<any[], void>>(fn: T, timeout?: number, immediate?: boolean) => () => void;
/**
 * @description 节流函数
 * @param fn 函数
 * @param timeout 延迟时间（毫秒），默认 `1000`
 */
declare const throttle: <T extends FunctionArgs<any[], void>>(fn: T, timeout?: number) => () => void;

/**
 * @description 检测设备类型（mobile返回 `true` ，反之）
 */
declare const deviceDetection: () => boolean;
/**
 * @description 获取浏览器 `型号` 以及 `版本`
 */
declare const getBrowserInfo: () => BrowserType;

/**
 * @description 下载在线图片
 * @param url 需要下载的 `url`
 * @param filename 文件名
 * @param mime 类型
 * @param bom `BlobPart`
 */
declare function downloadByOnlineUrl(url: string, filename: string, mime?: string, bom?: BlobPart): void;
/**
 * @description 基于 `base64` 下载图片
 * @param buf `base64`
 * @param filename 文件名
 * @param mime 类型
 * @param bom `BlobPart`
 */
declare function downloadByBase64(buf: string, filename: string, mime?: string, bom?: BlobPart): void;
/**
 * @description 根据后台接口文件流下载
 * @param data 文件流
 * @param filename 文件名
 * @param mime 类型
 * @param bom `BlobPart`
 */
declare function downloadByData(data: BlobPart, filename: string, mime?: string, bom?: BlobPart): void;
/**
 * @description 根据文件地址下载文件
 * @param url 文件地址
 * @param fileName 文件名
 * @param target `Target`，默认 `_self`
 */
declare function downloadByUrl(url: string, fileName: string, target?: string): boolean;

/**
 * @description 判断两个对象是否相等
 * @param obj 前一个对象
 * @param other 后一个对象
 * @returns `boolean`
 */
declare function isEqualObject(obj: Record<string, unknown> | undefined, other: Record<string, unknown> | undefined): boolean;
/**
 * @description 判断两个数组是否相等
 * @param arr 前一个数组
 * @param other 后一个数组
 * @returns `boolean`
 */
declare function isEqualArray(arr: unknown[] | undefined, other: unknown[] | undefined): boolean;
/**
 * @description 判断两者是否相等
 * @param a 前者
 * @param b 后者
 * @returns `boolean`
 */
declare function isEqual(a: unknown, b: unknown): boolean;

/**
 * @description 处理FormData传参
 * @param obj 参数，对象格式，例如：`{ a: 1, b: "2", ... }`
 * @returns FormData
 */
declare function formDataHander(obj: any): FormData;

type SFCWithInstall<T> = T & Plugin;
type SFCInstallWithContext<T> = SFCWithInstall<T> & {
    _context: AppContext | null;
};
declare const withInstall: <T, E extends Record<string, any>>(main: T, extra?: E | undefined) => SFCWithInstall<T> & E;
declare const withInstallFunction: <T>(fn: T, name: string) => SFCInstallWithContext<T>;
declare const withNoopInstall: <T>(component: T) => SFCWithInstall<T>;

/**
 * @description 判断某值是某种类型
 * @param val 需要判断的值
 * @param type 需要判断值的类型
 * @returns boolean
 */
declare function is(val: unknown, type: string): boolean;
/**
 * @description 是否是对象 `object`
 */
declare function isObject(val: any): val is Record<any, any>;
/**
 * @description 是否是普通对象。该对象由 `Object` 构造函数创建，或者 `[[Prototype]]` 为 `null`
 * @param val 要检查的值
 * @returns boolean 如果 `val` 为一个普通对象，那么返回 `true` 否则返回 `false`
 */
declare function isPlainObject(val: any): val is Record<any, any>;
/**
 * @description 是否非 `undefined`
 */
declare function isDef<T = unknown>(val?: T): val is T;
/**
 * @description 是否是 `undefined`
 */
declare function isUnDef<T = unknown>(val?: T): val is T;
/**
 * @description 是否是 `null`
 */
declare function isNull(val: unknown): val is null;
/**
 * @description 是否是 `null` 并且是 `undefined`
 */
declare function isNullAndUnDef(val: unknown): val is null | undefined;
/**
 * @description 是否是 `null` 或者 `undefined`
 */
declare function isNullOrUnDef(val: unknown): val is null | undefined;
/**
 * @description 是否为空，针对 `数组`、`对象`、`字符串`、`new Map()`、`new Set()` 进行判断
 */
declare function isEmpty<T = unknown>(val: T): val is T;
/**
 * @description 是否为空，针对 `数组`、`对象`、`字符串`、`new Map()`、`new Set()`、`null`、`undefined` 进行判断，`null`、`undefined` 直接返回 `true`，也就是直接等于空
 */
declare function isAllEmpty<T = unknown>(val: T): val is T;
/**
 * @description 是否是 `Date` 日期类型
 */
declare function isDate(val: unknown): val is Date;
/**
 * @description 是否是闰年
 */
declare function isLeapYear(val: number): boolean;
/**
 * @description 是否是 `number`
 */
declare function isNumber(val: unknown): val is number;
/**
 * @description 是否是 `Promise`
 */
declare function isPromise<T = any>(val: unknown): val is Promise<T>;
/**
 * @description 是否是 `string`
 */
declare function isString(val: unknown): val is string;
/**
 * @description 是否是 `Function`
 */
declare function isFunction(val: unknown): val is Function;
/**
 * @description 是否是 `Boolean`
 */
declare function isBoolean(val: unknown): val is boolean;
/**
 * @description 是否是 `RegExp`
 */
declare function isRegExp(val: unknown): val is RegExp;
/**
 * @description 是否是 `Array`
 */
declare function isArray(val: any): val is Array<any>;
/**
 * @description 是否是标准的 `JSON` 格式
 */
declare function isJSON(val: any): boolean;
/**
 * @description 是否是 `Window`
 */
declare function isWindow(val: any): val is Window;
/**
 * @description 是否是 `Element`
 */
declare function isElement(val: unknown): val is Element;
/**
 * @description 是否是 `Base64`
 */
declare const isBase64: (val: string) => boolean;
/**
 * @description 是否是 `hex`
 */
declare const isHex: (color: string) => boolean;
/**
 * @description 是否是 `rgb`
 */
declare const isRgb: (color: string) => boolean;
/**
 * @description 是否是 `rgba`
 */
declare const isRgba: (color: string) => boolean;
/**
 * @description 是否是服务端
 */
declare const isServer: boolean;
/**
 * @description 是否是 `window`
 */
declare const isClient: boolean;
/**
 * @description `url` 链接正则
 */
declare function isUrl(value: string): boolean;
/**
 * @description 手机号码正则
 */
declare function isPhone(value: any): boolean;
/**
 * @description 邮箱正则
 */
declare function isEmail(value: string): boolean;
/**
 * @description `QQ` 正则
 */
declare function isQQ(value: number): boolean;
/**
 * @description 是否是中国大陆邮政编码（共6位，且不能以0开头）
 */
declare function isPostCode(value: number): boolean;
/**
 * @description 1. 校验是否包含中文或指定的 `unicode` 字符；2. 校验是否全是中文或指定的 `unicode` 字符（包括常用中文标点符号，更多使用方法请看下方链接)
 * @see https://pure-admin-utils.netlify.app/utils/is/is.html#hascnchars
 */
declare function hasCNChars(value: any, options?: isParams): boolean;
/**
 * @description 是否是小写字母
 */
declare function isLowerCase(value: string): boolean;
/**
 * @description 是否是大写字母
 */
declare function isUpperCase(value: string): boolean;
/**
 * @description 是否是大小写字母
 */
declare function isAlphabets(value: string): boolean;
/**
 * @description 检测字符串是否有空格。true：有空格，false：无空格
 */
declare function isExistSpace(value: string): boolean;

/**
 * @description 创建超链接
 * @param href 超链接地址
 * @param target Target
 */
declare const openLink: (href: string, target?: Target) => void;

/**
 * @description 求数字类型组成数组中的最大值
 * @param list 数字类型组成数组
 * @returns 最大值
 */
declare const max: (list: Array<number>) => number;
/**
 * @description 求数字类型组成数组中的最小值
 * @param list 数字类型组成数组
 * @returns 最小值
 */
declare const min: (list: Array<number>) => number;
/**
 * @description 求数字类型组成数组中的和
 * @param list 数字类型组成数组
 * @returns 求和值
 */
declare const sum: (list: Array<number>) => number;
/**
 * @description 求数字类型组成数组中的平均值
 * @param list 数字类型组成数组
 * @returns 平均值
 */
declare const average: (list: Array<number>) => number;
/**
 * @description 将阿拉伯数字翻译成中文数字
 * @param num 阿拉伯数字
 * @returns 中文数字
 */
declare const numberToChinese: (num: number | string) => string;
/**
 * @description 判断数值是否超过 `js` 最大值
 * @param num 需要判断的数值
 * @returns boolean
 */
declare function exceedMathMax(num: number): boolean;
/**
 * @description 两个数值的加法运算
 * @param num1
 * @param num2
 * @param decimal 保留的小数位数，为 `0` 时不进行任何处理
 * @returns 加法运算后的值
 */
declare function addition(num1: number, num2: number, decimal?: number): number;
/**
 * @description 两个数值的减法运算
 * @param num1
 * @param num2
 * @param decimal 保留的小数位数，为 `0` 时不进行任何处理
 * @returns 减法运算后的值
 */
declare function subtraction(num1: number, num2: number, decimal?: number): number;
/**
 * @description 两个数值的乘法运算
 * @param num1
 * @param num2
 * @param decimal 保留的小数位数，为 `0` 时不进行任何处理
 * @returns 乘法运算后的值
 */
declare function multiplication(num1: number, num2: number, decimal?: number): number;
/**
 * @description 两个数值的除法运算
 * @param num1
 * @param num2
 * @param decimal 保留的小数位数，为 `0` 时不进行任何处理
 * @returns 除法运算后的值
 */
declare function divisionOperation(num1: number, num2: number, decimal?: number): number;
/**
 * @description 将字节单位智能转化成 `Bytes` 、 `KB` 、 `MB` 、 `GB` 、 `TB` 、 `PB` 、 `EB` 、 `ZB` 、 `YB` 其中的一种
 * @param byte 字节
 * @param digits 四舍五入保留几位小数（默认四舍五入保留两位小数）
 * @returns 智能转化字节单位后的值
 */
declare const formatBytes: (byte: number, digits?: number) => string;

/**
 * @description 横线转驼峰命名
 * @param str 字符串
 * @returns 横线转驼峰命名后的字符串
 */
declare const nameCamelize: (str: string) => string;
/**
 * @description 驼峰命名转横线命名：拆分字符串，使用 - 相连，并且全部转换为小写
 * @param str 字符串
 * @returns 驼峰命名转横线命名后的字符串
 */
declare const nameHyphenate: (str: string) => string;

/**
 * @description 获取当前页面在加载和使用期间发生各种事件的性能计时信息
 * @returns Performance（单位：秒）
 * @see https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceTiming
 */
declare function getPerformance(): Promise<Performance>;

/**
 * @description 去掉字符串左边空格
 * @param str 字符串
 * @returns 去掉左边空格后的字符串
 */
declare const removeLeftSpace: (str: string) => string;
/**
 * @description 去掉字符串右边空格
 * @param str 字符串
 * @returns 去掉右边空格后的字符串
 */
declare const removeRightSpace: (str: string) => string;
/**
 * @description 去掉字符串左右两边空格
 * @param str 字符串
 * @returns 去掉左右两边空格后的字符串
 */
declare const removeBothSidesSpace: (str: string) => string;
/**
 * @description 去掉字符串全部空格
 * @param str 字符串
 * @returns 去掉全部空格后的字符串
 */
declare const removeAllSpace: (str: string) => string;

declare class sessionStorageProxy implements ProxyStorage {
    protected storage: Storage;
    constructor(storageModel: any);
    /**
     * @description 储存对应键名的Storage对象
     * @param k 键名
     * @param v 键值
     */
    setItem<T>(k: string, v: T): void;
    /**
     * @description 获取对应键名的Storage对象
     * @param k 键名
     * @returns 对应键名的Storage对象
     */
    getItem<T>(k: string): T;
    /**
     * @description 删除对应键名的Storage对象
     * @param k 键名
     */
    removeItem(k: string): void;
    /**
     * @description 删除此域的所有Storage对象
     */
    clear(): void;
}
declare class localStorageProxy extends sessionStorageProxy implements ProxyStorage {
    constructor(localStorage: any);
}
/**
 * @description 操作本地 `localStorage`
 */
declare const storageLocal: () => localStorageProxy;
/**
 * @description 操作本地 `sessionStorage`
 */
declare const storageSession: () => sessionStorageProxy;

/**
 * @description 截取指定字符前面的值
 * @param val 要截取的值
 * @param character 指定字符
 * @returns 截取后的值
 */
declare function subBefore(val: string, character: string): string;
/**
 * @description 截取指定字符后面的值
 * @param val 要截取的值
 * @param character 指定字符
 * @returns 截取后的值
 */
declare function subAfter(val: string, character: string): string;
/**
 * @description 截取指定字符两边的值
 * @param val 要截取的值
 * @param character 指定字符
 * @returns 截取后的值，数组格式，左边返回指定字符前面的值，后边返回指定字符后面的值
 */
declare function subBothSides(val: string, character: string): Array<string>;
/**
 * @description 截取指定两个字符之间的值
 * @param val 要截取的值
 * @param before 前一个指定字符
 * @param after 后一个指定字符
 * @returns 截取后的值
 */
declare function subBetween(val: string, before: string, after: string): string;
/**
 * @description 截取字符并追加省略号（常用场景：echarts）
 * @param str 要截取的值
 * @param len 要保留的位数（默认三位）
 * @returns 截取字符并追加省略号后的值
 */
declare function subTextAddEllipsis(str: string | number, len?: number): string;
/**
 * @description 将数字拆分为单个数字组成的数组
 * @param number 要拆分的数字
 * @returns 拆分的单个数字集合
 */
declare function splitNum(number: number): Array<number> | string;

/**
 * @description 提取菜单树中的每一项uniqueId
 * @param tree 树
 * @returns 每一项uniqueId组成的数组
 */
declare const extractPathList: (tree: any[]) => any;
/**
 * @description 如果父级下children的length为1，删除children并自动组建唯一uniqueId
 * @param tree 树
 * @param pathList 每一项的id组成的数组
 * @returns 组件唯一uniqueId后的树
 */
declare const deleteChildren: (tree: any[], pathList?: never[]) => any;
/**
 * @description 创建层级关系
 * @param tree 树
 * @param pathList 每一项的id组成的数组
 * @returns 创建层级关系后的树
 */
declare const buildHierarchyTree: (tree: any[], pathList?: never[]) => any;
/**
 * @description 广度优先遍历，根据唯一uniqueId找当前节点信息
 * @param tree 树
 * @param uniqueId 唯一uniqueId
 * @returns 当前节点信息
 */
declare const getNodeByUniqueId: (tree: any[], uniqueId: number | string) => any;
/**
 * @description 向当前唯一uniqueId节点中追加字段
 * @param tree 树
 * @param uniqueId 唯一uniqueId
 * @param fields 需要追加的字段
 * @returns 追加字段后的树
 */
declare const appendFieldByUniqueId: (tree: any[], uniqueId: number | string, fields: object) => any;
/**
 * @description 构造树型结构数据
 * @param data 数据源
 * @param id id字段 默认id
 * @param parentId 父节点字段，默认parentId
 * @param children 子节点字段，默认children
 * @returns 追加字段后的树
 */
declare const handleTree: (data: any[], id?: string, parentId?: string, children?: string) => any;

/**
 * @description 获取浏览器当前的 `location` 信息
 */
declare function getLocation(): Location;
/**
 * @description 提取浏览器 `url` 中所有参数
 * @param url 超链接地址
 * @returns 所有参数组成的对象
 */
declare function getQueryMap(url: string): object;

/**
 * @description 生成 `32` 位 `uuid`
 * @returns `32` 位 `uuid`
 */
declare const buildUUID: () => string;
/**
 * @description 生成自定义前缀的 `uuid`
 * @param prefix 自定义前缀
 * @returns 自定义前缀的 `uuid`
 */
declare const buildPrefixUUID: (prefix?: string) => string;
/**
 * @description 生成指定长度和基数的 `uuid`
 * @param len 指定长度
 * @param radix 指定基数
 * @param prefix 自定义前缀
 * @returns 指定长度和基数的 `uuid`
 */
declare const uuid: (len?: number, radix?: number, prefix?: string) => string;

/**
 * @description 判断一个数组（这里简称为母体）中是否包含了另一个由基本数据类型组成的数组（这里简称为子体）中的全部元素
 * @param c 子体
 * @param m 母体
 */
declare function isIncludeAllChildren(c: Array<string | number | unknown>, m: Array<unknown>): boolean;
/**
 * @description 获取由基本数据类型组成的数组交集
 */
declare const intersection: (...rest: any[]) => any[];
/**
 * @description 数组中两个元素互换顺序（内部使用 `splice` 会改变原数组）
 * @param arr 数组
 * @param fIndex 要换的元素索引
 * @param sIndex 被换的元素索引
 */
declare function swapOrder(arr: any[], fIndex: number, sIndex: number): any[];
/**
 * @description 从数组中获取指定 `key` 组成的新数组，会去重也会去除不存在的值
 * @param arr 数组
 * @param key 指定的 `key`
 */
declare function getKeyList(arr: any, key: string): any[];

declare function entries<T>(obj: Recordable<T>): [string, T][];
declare function useAttrs(params?: AttrParams): Ref<Recordable> | {};

/**
 * @description tsx中加载动态组件
 * @returns 动态组件
 */
declare const useDynamicComponent: (component: string) => Component;

declare function copyTextToClipboard(input: string, { target }?: {
    target?: HTMLElement;
}): boolean;
/**
 * @description 拷贝
 */
declare const useCopyToClipboard: (initial?: string) => {
    clipboardValue: _vue_reactivity.Ref<string>;
    copied: _vue_reactivity.Ref<boolean>;
};

/**
 * @description 检测网页是否为dark模式
 * @returns isDark 值为true或者false（响应式）
 */
declare const useDark: () => {
    isDark: Ref<Boolean>;
};

/**
 * @description 使得容器可拖拽
 * @param targetRef 要拖拽的元素
 * @param dragRef 拖拽的地方
 * @param draggable 是否开启拖拽
 * @returns offsetX、offsetY
 */
declare const useDraggable: (targetRef: Ref<HTMLElement | undefined>, dragRef: Ref<HTMLElement | undefined>, draggable: Ref<boolean> | ComputedRef<boolean> | Boolean) => {
    transform: Ref<{
        offsetX: number;
        offsetY: number;
    }>;
};

/**
 * @description 渲染echarts
 * @param elRef ref
 * @param options EchartOptions
 */
declare const useECharts: (elRef: Ref<HTMLDivElement>, options?: EchartOptions) => {
    echarts: echarts_types_dist_echarts.ECharts;
    clear: () => void;
    resize: () => void;
    getDom: () => HTMLCanvasElement | HTMLDivElement;
    getWidth: () => number;
    getOption: () => echarts_types_dist_echarts.EChartsCoreOption;
    getHeight: () => number;
    addTooltip: (type: ToolTipType) => void;
    getDataURL: (opts: DataURL) => string;
    setOptions: (options: UtilsEChartsOption, ...params: OptionsParams[]) => void;
    appendData: (opts: AppendDataOpts) => void;
    getInstance: () => echarts_types_dist_echarts.ECharts | null;
    showLoading: (params: LoadOpts) => void;
    hideLoading: () => void;
    getConnectedDataURL: (opts: DataURL) => string;
};

declare function useGlobal<T>(): T;

/**
 * @description 加载异步资源
 * @param destroy 是否在生命周期结束后移除标签，默认true
 * @returns loadCss：加载异步css链接、loadScript：加载异步js链接
 */
declare function useLoader(destroy?: boolean): {
    loadCss: (opts: OptionsScript) => Promise<unknown>;
    loadScript: (opts: OptionsScript) => Promise<unknown>;
};

/**
 * @description 创建水印
 */
declare const useWatermark: (appendEl?: Ref<HTMLElement | null>) => {
    clear: () => void;
    setWatermark: (str: string, attr?: attr | undefined) => void;
};

export { AppendDataOpts, ArgumentsType, Arrayable, AttrParams, Awaitable, BrowserType, ColorOptions, ColorType, ComponentElRef, ComponentRef, Constructor, DataURL, DeepMerge, DeviceType, EchartOptions, ElRef, ElementOf, EventParams, Fn, FunctionArgs, GlobalUtilsPropertiesApi, LoadOpts, LoadType, MergeInsertions, MouseEvent, Nullable, OptionsParams, OptionsScript, Performance, ProxyStorage, ReadonlyRecordable, Recordable, RefType, SFCInstallWithContext, SFCWithInstall, Target, Theme, TimeoutHandle, ToolTipType, UnionToIntersection, UtilsEChartsOption, addClass, addZero, addition, allowMouseEvent, appendFieldByUniqueId, attr, average, banMouseEvent, bd09togcj02, buildHierarchyTree, buildPrefixUUID, buildUUID, centsToDollars, clone, cloneDeep, convertPath, copyTextToClipboard, createYear, currentDateOpt, currentDateType, darken, dataURLtoBlob, dateFormat, dateType, debounce, delay, deleteChildren, deviceDetection, divisionOperation, dollarsToCents, downloadByBase64, downloadByData, downloadByOnlineUrl, downloadByUrl, entries, exceedMathMax, extractPathList, formDataHander, formatBytes, gcj02tobd09, gcj02towgs84, getBrowserInfo, getClass, getCurrentDate, getCurrentWeek, getDecimalPlaces, getKeyList, getLocation, getNodeByUniqueId, getPackageSize, getPerformance, getQueryMap, gradientType, handleTree, hasCNChars, hasClass, hasOwnProp, hexToRgb, intersection, is, isAllEmpty, isAlphabets, isArray, isBase64, isBoolean, isClient, isDate, isDef, isElement, isEmail, isEmpty, isEqual, isEqualArray, isEqualObject, isExistSpace, isFunction, isHex, isIncludeAllChildren, isJSON, isLeapYear, isLowerCase, isNull, isNullAndUnDef, isNullOrUnDef, isNumber, isObject, isParams, isPhone, isPlainObject, isPostCode, isPromise, isQQ, isRegExp, isRgb, isRgba, isServer, isString, isUnDef, isUpperCase, isUrl, isWindow, lighten, max, min, monthDays, multiplication, nameCamelize, nameHyphenate, numberToChinese, openLink, out_of_china, packageOpt, priceToThousands, priceUppercase, randomColor, removeAllSpace, removeBothSidesSpace, removeClass, removeLeftSpace, removeRightSpace, rgbToHex, splitNum, storageLocal, storageSession, subAfter, subBefore, subBetween, subBothSides, subTextAddEllipsis, subtraction, sum, swapOrder, throttle, toggleClass, urlToBase64, useAttrs, useCopyToClipboard, useDark, useDraggable, useDynamicComponent, useECharts, useGlobal, useLoader, useWatermark, uuid, wgs84togcj02, withInstall, withInstallFunction, withNoopInstall };
