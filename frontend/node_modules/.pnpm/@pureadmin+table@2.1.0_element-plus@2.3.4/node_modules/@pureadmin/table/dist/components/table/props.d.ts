declare const _default: {
    data: {
        type: import("vue").PropType<any[]>;
        default: () => never[];
    };
    size: {
        readonly type: import("vue").PropType<import("element-plus/es/utils").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
        __epPropKey: true;
    };
    width: (NumberConstructor | StringConstructor)[];
    height: (NumberConstructor | StringConstructor)[];
    maxHeight: (NumberConstructor | StringConstructor)[];
    fit: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    border: BooleanConstructor;
    rowKey: import("vue").PropType<string | ((row: any) => string)>;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSummary: BooleanConstructor;
    sumText: StringConstructor;
    summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
    rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    highlightCurrentRow: BooleanConstructor;
    currentRowKey: (NumberConstructor | StringConstructor)[];
    emptyText: StringConstructor;
    expandRowKeys: import("vue").PropType<any[]>;
    defaultExpandAll: BooleanConstructor;
    defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
    tooltipEffect: StringConstructor;
    tooltipOptions: import("vue").PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
    spanMethod: import("vue").PropType<(data: {
        row: any;
        rowIndex: number;
        column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
        columnIndex: number;
    }) => number[] | {
        rowspan: number;
        colspan: number;
    }>;
    selectOnIndeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indent: {
        type: NumberConstructor;
        default: number;
    };
    treeProps: {
        type: import("vue").PropType<{
            hasChildren?: string;
            children?: string;
        }>;
        default: () => {
            hasChildren: string;
            children: string;
        };
    };
    lazy: BooleanConstructor;
    load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default: () => {};
    };
    className: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"auto" | "fixed">;
        default: string;
    };
    scrollbarAlwaysOn: {
        type: BooleanConstructor;
        default: boolean;
    };
    flexible: BooleanConstructor;
    /** Unique key, if there are multiple table instances on a single page, but you only get one table instance, you can solve it by setting the key, but in most cases you donâ€™t need to set it, it will be processed automatically */
    key: {
        type: NumberConstructor | StringConstructor;
        default: string;
    };
    /** Table columns config */
    columns: {
        type: ArrayConstructor;
        default: any[];
    };
    /** Table loading */
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Table loading config */
    loadingConfig: {
        type: ObjectConstructor;
        default: () => void;
    };
    /** Integrate Table-column with align property into Table property */
    alignWhole: {
        type: StringConstructor;
        default: string;
    };
    /** Integrate Table-column with header-align property into Table property */
    headerAlign: {
        type: StringConstructor;
        default: string;
    };
    /** Integrate Table-column with show-overflow-tooltip property into Table property */
    showOverflowTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** The background color of the row when the mouse is over the row */
    rowHoverBgColor: {
        type: StringConstructor;
        default: string;
    };
    /** Pagination config */
    pagination: {
        type: ObjectConstructor;
        default: {
            total: number;
            pageSize: number;
            align: string;
            background: boolean;
            pageSizes: number[];
            layout: string;
        };
    };
    /** Pagination size */
    paginationSmall: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export default _default;
