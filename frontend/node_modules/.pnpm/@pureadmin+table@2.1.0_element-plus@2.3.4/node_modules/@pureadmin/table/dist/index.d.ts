export type { TableColumnFilterPlacement, TableColumnSortOrders, TableColumnSortable, TableColumnRenderer, TableColumnScope, TableColumnFixed, TableColumnType, PaginationProps, PureTableProps, LoadingConfig, TableColumns, TableColumn, TableProps, Layout, Effect, Align, Size } from "./types";
import type { App } from "vue";
export declare const PureTable: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            style: import("vue").CSSProperties;
            className: string;
            key: string | number;
            data: any[];
            fit: boolean;
            stripe: boolean;
            border: boolean;
            showHeader: boolean;
            showSummary: boolean;
            highlightCurrentRow: boolean;
            defaultExpandAll: boolean;
            selectOnIndeterminate: boolean;
            indent: number;
            treeProps: {
                hasChildren: string;
                children: string;
            };
            lazy: boolean;
            tableLayout: "auto" | "fixed";
            scrollbarAlwaysOn: boolean;
            flexible: boolean;
            columns: unknown[];
            loading: boolean;
            loadingConfig: Record<string, any>;
            alignWhole: string;
            headerAlign: string;
            showOverflowTooltip: boolean;
            rowHoverBgColor: string;
            pagination: Record<string, any>;
            paginationSmall: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<any[]>;
                default: () => never[];
            };
            size: {
                readonly type: import("vue").PropType<import("element-plus/es/utils").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
                readonly required: false;
                readonly validator: (val: unknown) => boolean;
                __epPropKey: true;
            };
            width: (NumberConstructor | StringConstructor)[];
            height: (NumberConstructor | StringConstructor)[];
            maxHeight: (NumberConstructor | StringConstructor)[];
            fit: {
                type: BooleanConstructor;
                default: boolean;
            };
            stripe: BooleanConstructor;
            border: BooleanConstructor;
            rowKey: import("vue").PropType<string | ((row: any) => string)>;
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSummary: BooleanConstructor;
            sumText: StringConstructor;
            summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
            rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
            rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
            cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
            cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
            headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
            headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
            headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
            headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
            highlightCurrentRow: BooleanConstructor;
            currentRowKey: (NumberConstructor | StringConstructor)[];
            emptyText: StringConstructor;
            expandRowKeys: import("vue").PropType<any[]>;
            defaultExpandAll: BooleanConstructor;
            defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
            tooltipEffect: StringConstructor;
            tooltipOptions: import("vue").PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
            spanMethod: import("vue").PropType<(data: {
                row: any;
                rowIndex: number;
                column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
                columnIndex: number;
            }) => number[] | {
                rowspan: number;
                colspan: number;
            }>;
            selectOnIndeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indent: {
                type: NumberConstructor;
                default: number;
            };
            treeProps: {
                type: import("vue").PropType<{
                    hasChildren?: string;
                    children?: string;
                }>;
                default: () => {
                    hasChildren: string;
                    children: string;
                };
            };
            lazy: BooleanConstructor;
            load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
            style: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: () => {};
            };
            className: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"auto" | "fixed">;
                default: string;
            };
            scrollbarAlwaysOn: {
                type: BooleanConstructor;
                default: boolean;
            };
            flexible: BooleanConstructor;
            key: {
                type: NumberConstructor | StringConstructor;
                default: string;
            };
            columns: {
                type: ArrayConstructor;
                default: any[];
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingConfig: {
                type: ObjectConstructor;
                default: () => void;
            };
            alignWhole: {
                type: StringConstructor;
                default: string;
            };
            headerAlign: {
                type: StringConstructor;
                default: string;
            };
            showOverflowTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowHoverBgColor: {
                type: StringConstructor;
                default: string;
            };
            pagination: {
                type: ObjectConstructor;
                default: {
                    total: number;
                    pageSize: number;
                    align: string;
                    background: boolean;
                    pageSizes: number[];
                    layout: string;
                };
            };
            paginationSmall: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onPage-size-change"?: (...args: any[]) => any;
            "onPage-current-change"?: (...args: any[]) => any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "className" | "key" | "data" | "fit" | "stripe" | "border" | "showHeader" | "showSummary" | "highlightCurrentRow" | "defaultExpandAll" | "selectOnIndeterminate" | "indent" | "treeProps" | "lazy" | "tableLayout" | "scrollbarAlwaysOn" | "flexible" | "columns" | "loading" | "loadingConfig" | "alignWhole" | "headerAlign" | "showOverflowTooltip" | "rowHoverBgColor" | "pagination" | "paginationSmall">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: "page-size-change" | "page-current-change", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<any[]>;
                default: () => never[];
            };
            size: {
                readonly type: import("vue").PropType<import("element-plus/es/utils").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
                readonly required: false;
                readonly validator: (val: unknown) => boolean;
                __epPropKey: true;
            };
            width: (NumberConstructor | StringConstructor)[];
            height: (NumberConstructor | StringConstructor)[];
            maxHeight: (NumberConstructor | StringConstructor)[];
            fit: {
                type: BooleanConstructor;
                default: boolean;
            };
            stripe: BooleanConstructor;
            border: BooleanConstructor;
            rowKey: import("vue").PropType<string | ((row: any) => string)>;
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSummary: BooleanConstructor;
            sumText: StringConstructor;
            summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
            rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
            rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
            cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
            cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
            headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
            headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
            headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
            headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
            highlightCurrentRow: BooleanConstructor;
            currentRowKey: (NumberConstructor | StringConstructor)[];
            emptyText: StringConstructor;
            expandRowKeys: import("vue").PropType<any[]>;
            defaultExpandAll: BooleanConstructor;
            defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
            tooltipEffect: StringConstructor;
            tooltipOptions: import("vue").PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
            spanMethod: import("vue").PropType<(data: {
                row: any;
                rowIndex: number;
                column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
                columnIndex: number;
            }) => number[] | {
                rowspan: number;
                colspan: number;
            }>;
            selectOnIndeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indent: {
                type: NumberConstructor;
                default: number;
            };
            treeProps: {
                type: import("vue").PropType<{
                    hasChildren?: string;
                    children?: string;
                }>;
                default: () => {
                    hasChildren: string;
                    children: string;
                };
            };
            lazy: BooleanConstructor;
            load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
            style: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: () => {};
            };
            className: {
                type: StringConstructor;
                default: string;
            };
            tableLayout: {
                type: import("vue").PropType<"auto" | "fixed">;
                default: string;
            };
            scrollbarAlwaysOn: {
                type: BooleanConstructor;
                default: boolean;
            };
            flexible: BooleanConstructor;
            key: {
                type: NumberConstructor | StringConstructor;
                default: string;
            };
            columns: {
                type: ArrayConstructor;
                default: any[];
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            loadingConfig: {
                type: ObjectConstructor;
                default: () => void;
            };
            alignWhole: {
                type: StringConstructor;
                default: string;
            };
            headerAlign: {
                type: StringConstructor;
                default: string;
            };
            showOverflowTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowHoverBgColor: {
                type: StringConstructor;
                default: string;
            };
            pagination: {
                type: ObjectConstructor;
                default: {
                    total: number;
                    pageSize: number;
                    align: string;
                    background: boolean;
                    pageSizes: number[];
                    layout: string;
                };
            };
            paginationSmall: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onPage-size-change"?: (...args: any[]) => any;
            "onPage-current-change"?: (...args: any[]) => any;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("page-size-change" | "page-current-change")[], string, {
            style: import("vue").CSSProperties;
            className: string;
            key: string | number;
            data: any[];
            fit: boolean;
            stripe: boolean;
            border: boolean;
            showHeader: boolean;
            showSummary: boolean;
            highlightCurrentRow: boolean;
            defaultExpandAll: boolean;
            selectOnIndeterminate: boolean;
            indent: number;
            treeProps: {
                hasChildren: string;
                children: string;
            };
            lazy: boolean;
            tableLayout: "auto" | "fixed";
            scrollbarAlwaysOn: boolean;
            flexible: boolean;
            columns: unknown[];
            loading: boolean;
            loadingConfig: Record<string, any>;
            alignWhole: string;
            headerAlign: string;
            showOverflowTooltip: boolean;
            rowHoverBgColor: string;
            pagination: Record<string, any>;
            paginationSmall: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<any[]>;
            default: () => never[];
        };
        size: {
            readonly type: import("vue").PropType<import("element-plus/es/utils").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
            __epPropKey: true;
        };
        width: (NumberConstructor | StringConstructor)[];
        height: (NumberConstructor | StringConstructor)[];
        maxHeight: (NumberConstructor | StringConstructor)[];
        fit: {
            type: BooleanConstructor;
            default: boolean;
        };
        stripe: BooleanConstructor;
        border: BooleanConstructor;
        rowKey: import("vue").PropType<string | ((row: any) => string)>;
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        showSummary: BooleanConstructor;
        sumText: StringConstructor;
        summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
        rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
        rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
        cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
        cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
        headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
        headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
        headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
        headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
        highlightCurrentRow: BooleanConstructor;
        currentRowKey: (NumberConstructor | StringConstructor)[];
        emptyText: StringConstructor;
        expandRowKeys: import("vue").PropType<any[]>;
        defaultExpandAll: BooleanConstructor;
        defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
        tooltipEffect: StringConstructor;
        tooltipOptions: import("vue").PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
        spanMethod: import("vue").PropType<(data: {
            row: any;
            rowIndex: number;
            column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
            columnIndex: number;
        }) => number[] | {
            rowspan: number;
            colspan: number;
        }>;
        selectOnIndeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        indent: {
            type: NumberConstructor;
            default: number;
        };
        treeProps: {
            type: import("vue").PropType<{
                hasChildren?: string;
                children?: string;
            }>;
            default: () => {
                hasChildren: string;
                children: string;
            };
        };
        lazy: BooleanConstructor;
        load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
        style: {
            type: import("vue").PropType<import("vue").CSSProperties>;
            default: () => {};
        };
        className: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"auto" | "fixed">;
            default: string;
        };
        scrollbarAlwaysOn: {
            type: BooleanConstructor;
            default: boolean;
        };
        flexible: BooleanConstructor;
        key: {
            type: NumberConstructor | StringConstructor;
            default: string;
        };
        columns: {
            type: ArrayConstructor;
            default: any[];
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingConfig: {
            type: ObjectConstructor;
            default: () => void;
        };
        alignWhole: {
            type: StringConstructor;
            default: string;
        };
        headerAlign: {
            type: StringConstructor;
            default: string;
        };
        showOverflowTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowHoverBgColor: {
            type: StringConstructor;
            default: string;
        };
        pagination: {
            type: ObjectConstructor;
            default: {
                total: number;
                pageSize: number;
                align: string;
                background: boolean;
                pageSizes: number[];
                layout: string;
            };
        };
        paginationSmall: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onPage-size-change"?: (...args: any[]) => any;
        "onPage-current-change"?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<any[]>;
        default: () => never[];
    };
    size: {
        readonly type: import("vue").PropType<import("element-plus/es/utils").EpPropMergeType<StringConstructor, "" | "large" | "default" | "small", never>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
        __epPropKey: true;
    };
    width: (NumberConstructor | StringConstructor)[];
    height: (NumberConstructor | StringConstructor)[];
    maxHeight: (NumberConstructor | StringConstructor)[];
    fit: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    border: BooleanConstructor;
    rowKey: import("vue").PropType<string | ((row: any) => string)>;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSummary: BooleanConstructor;
    sumText: StringConstructor;
    summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
    rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    highlightCurrentRow: BooleanConstructor;
    currentRowKey: (NumberConstructor | StringConstructor)[];
    emptyText: StringConstructor;
    expandRowKeys: import("vue").PropType<any[]>;
    defaultExpandAll: BooleanConstructor;
    defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
    tooltipEffect: StringConstructor;
    tooltipOptions: import("vue").PropType<Partial<Pick<import("element-plus").ElTooltipProps, "showArrow" | "effect" | "enterable" | "popperClass" | "offset" | "placement" | "popperOptions" | "showAfter" | "hideAfter">>>;
    spanMethod: import("vue").PropType<(data: {
        row: any;
        rowIndex: number;
        column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
        columnIndex: number;
    }) => number[] | {
        rowspan: number;
        colspan: number;
    }>;
    selectOnIndeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indent: {
        type: NumberConstructor;
        default: number;
    };
    treeProps: {
        type: import("vue").PropType<{
            hasChildren?: string;
            children?: string;
        }>;
        default: () => {
            hasChildren: string;
            children: string;
        };
    };
    lazy: BooleanConstructor;
    load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default: () => {};
    };
    className: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"auto" | "fixed">;
        default: string;
    };
    scrollbarAlwaysOn: {
        type: BooleanConstructor;
        default: boolean;
    };
    flexible: BooleanConstructor;
    key: {
        type: NumberConstructor | StringConstructor;
        default: string;
    };
    columns: {
        type: ArrayConstructor;
        default: any[];
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingConfig: {
        type: ObjectConstructor;
        default: () => void;
    };
    alignWhole: {
        type: StringConstructor;
        default: string;
    };
    headerAlign: {
        type: StringConstructor;
        default: string;
    };
    showOverflowTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowHoverBgColor: {
        type: StringConstructor;
        default: string;
    };
    pagination: {
        type: ObjectConstructor;
        default: {
            total: number;
            pageSize: number;
            align: string;
            background: boolean;
            pageSizes: number[];
            layout: string;
        };
    };
    paginationSmall: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onPage-size-change"?: (...args: any[]) => any;
    "onPage-current-change"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("page-size-change" | "page-current-change")[], "page-size-change" | "page-current-change", {
    style: import("vue").CSSProperties;
    className: string;
    key: string | number;
    data: any[];
    fit: boolean;
    stripe: boolean;
    border: boolean;
    showHeader: boolean;
    showSummary: boolean;
    highlightCurrentRow: boolean;
    defaultExpandAll: boolean;
    selectOnIndeterminate: boolean;
    indent: number;
    treeProps: {
        hasChildren: string;
        children: string;
    };
    lazy: boolean;
    tableLayout: "auto" | "fixed";
    scrollbarAlwaysOn: boolean;
    flexible: boolean;
    columns: unknown[];
    loading: boolean;
    loadingConfig: Record<string, any>;
    alignWhole: string;
    headerAlign: string;
    showOverflowTooltip: boolean;
    rowHoverBgColor: string;
    pagination: Record<string, any>;
    paginationSmall: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => void;
};
export default PureTable;
